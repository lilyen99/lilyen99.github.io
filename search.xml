<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cookie和Session入门学习小结</title>
    <url>/2020/04/15/Cookie%E5%92%8CSession%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>一次会话中包含多次请求和响应，当浏览器第一次给服务器发送请求时，会话建议，直到有一方断开</p>
<a id="more"></a>

<h4 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h4><p>在一次会话范围内的多次请求间，共享数据</p>
<h4 id="3-方式"><a href="#3-方式" class="headerlink" title="3. 方式"></a>3. 方式</h4><ol>
<li>客户端会话技术：<strong>Cookie</strong></li>
<li>服务器端会话技术：<strong>Session</strong></li>
</ol>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>客户端会话技术，将数据保存到客户端中</p>
<h4 id="2-入门"><a href="#2-入门" class="headerlink" title="2. 入门"></a>2. 入门</h4><p>步骤：</p>
<ol>
<li><p>创建Cookie对象，绑定数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,<span class="string">"value"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送Cookie对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Cookie对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h4><p>基于响应头<strong>set-cookie</strong>和请求头<strong>cookie</strong>实现</p>
<h4 id="4-细节"><a href="#4-细节" class="headerlink" title="4.细节"></a>4.细节</h4><ol>
<li><p>可以一次发送多个Cookie对象（可以创建多个Cookie对象，使用response调用多次<strong>addCookie</strong>方法即可）</p>
</li>
<li><p>在浏览器中的保存：</p>
<ol>
<li><p>在默认情况下，当浏览器关闭后，Cookie数据被销毁</p>
</li>
<li><p>可以持久化保存：</p>
<ol>
<li>使用 <strong>setMaxAge(int  seconds);</strong></li>
<li>当参数为正数时：将Cookie数据写到硬盘的文件中，并指定Cookie存活时间（单位为秒），时间到后，Cookie文件自动失效</li>
<li>当参数为负数时：即为默认情况</li>
<li>当参数为零时：删除Cookie消息</li>
</ol>
</li>
<li><p>在tomcat 8之后支持中文数据，但是仍然不支持一些特殊字符，建议使用URL编码存储，使用URL编码解析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String value = URLEncoder.encode(String value,<span class="string">"utf-8"</span>);</span><br><span class="line">String value = URLDecoder.decode(String value,<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Cookie共享问题：</p>
<ol>
<li><p>在一个tomcat服务器中，部署了多个web项目，那么在默认情况下，Cookie数据不能在这些web项目中共享</p>
<p><em>可以通过 *</em>setPath(String path)<strong>：设置Cookie数据的获取范围。默认情况下，设置为当前的虚拟目录，若要在一个tomcat服务器中共享，可以将path设置为</strong>“/“**</p>
</li>
<li><p>在不同的tomcat服务器间，默认情况下Cookie无法共享</p>
</li>
</ol>
</li>
<li><p>Cookie的特点和作用</p>
<ol>
<li>特点<ol>
<li>Cookie存储数据在客户端浏览器</li>
<li>浏览器对单个Cookie数据的大小有限制（4kb）以及对同一个域名下的Cookie总数量也有限制（20个）</li>
</ol>
</li>
<li>作用<ol>
<li>Cookie一般用于存储少量的不太敏感的数据</li>
<li>在不登录的情况下，完成服务器对客户端的身份识别</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h4 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>服务器端会话技术，在一次会话的多次请求期间共享数据，将数据保存在服务器端的对象中</p>
<h4 id="2-入门-1"><a href="#2-入门-1" class="headerlink" title="2. 入门"></a>2. 入门</h4><p>步骤</p>
<ol>
<li><p>获取HttpSession对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用HttpSession对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.setAttribute(<span class="string">"name"</span>,<span class="string">"value"</span>);</span><br><span class="line">session.getAttribut(<span class="string">"name"</span>);</span><br><span class="line">session.removeAttribute(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h4><p>Session的实现是依赖于Cookie的</p>
<h4 id="4-细节-1"><a href="#4-细节-1" class="headerlink" title="4.细节"></a>4.细节</h4><ol>
<li><p>当客户端关闭后（浏览器关闭），服务器不关闭，再次获取的Session对象不是同一个</p>
<p><em>可以通过创建Cookie（Session是依赖于Cookie而实现的），键为*</em>JSESSIONID<strong>，值为</strong>session.getId()**设置最大存活时间，让Cookie持久化保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端不关闭，服务器关闭后，再次获取的Session对象不是同一个</p>
<p>*但是为了确保数据不丢失，Tomcat将会自动完成以下工作（idea不行）</p>
<ol>
<li>Session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上</li>
<li>Session的活化：在服务器启动后，将session文件转化为内存中的session对象即可。</li>
</ol>
</li>
<li><p>Session什么时候被销毁？</p>
<ol>
<li><p>服务器关闭</p>
</li>
<li><p>Session对象调用invalidate()</p>
</li>
<li><p>Session默认失效时间为30分钟，可以进入Tomcat的web.xml文件进行配置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Session的特点</p>
<ol>
<li>Session用于存储一次会话的多次请求的数据在服务器端</li>
<li>Session可以存储任意类型，任意大小的数据</li>
</ol>
</li>
<li><p>Session和Cookie的区别</p>
<ol>
<li>Session存储在服务器端，Cookie存储在客户端</li>
<li>Session没有存储数据的大小限制，Cookie有</li>
<li>Session数据安全，Cookie相对不安全</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>Request入门学习小结</title>
    <url>/2020/04/13/Request%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h4><ol>
<li><p>基于TCP/IP的高级协议</p>
<a id="more"></a>
</li>
<li><p>默认端口号为 80 </p>
</li>
<li><p>基于请求/响应模型：一次请求对应一次响应</p>
</li>
<li><p>无状态的：每次请求之间相互独立，不能交互数</p>
<p>*历史版本</p>
<p>1.0：每一次请求响应都会建立新的连接</p>
<p>1.1：可以复用链接，是对1.0版本的升级</p>
</li>
</ol>
<h4 id="2-请求消息的数据格式"><a href="#2-请求消息的数据格式" class="headerlink" title="2.请求消息的数据格式"></a>2.请求消息的数据格式</h4><ol>
<li>请求行：<ol>
<li>请求的方式：<ol>
<li>GET:<ol>
<li>请求参数在请求行中，在url之后</li>
<li>请求的url长度有限制</li>
<li>不太安全</li>
</ol>
</li>
<li>POST：<ol>
<li>请求参数在请求体中</li>
<li>请求的url长度没有限制</li>
<li>相对安全</li>
</ol>
</li>
</ol>
</li>
<li>请求的url：/资源路径</li>
<li>请求的协议/版本：Http/1.1</li>
</ol>
</li>
<li>请求头：客户端浏览器告诉服务器的一些信息<ol>
<li>格式：  请求头名称：请求头值</li>
<li>常见的请求头<ol>
<li>User-Agent：浏览器告诉服务器自身的版本信息，以解决浏览器的兼容问题</li>
<li>Referer：告诉服务器当前请求的来源，可以防止盗链和进行统计工作</li>
</ol>
</li>
</ol>
</li>
<li>请求空行：用于分割POST请求的请求头和请求体</li>
<li>请求体（正文）：封装POST请求消息的请求参数</li>
</ol>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h4 id="1-Requset对象和Response对象的原理"><a href="#1-Requset对象和Response对象的原理" class="headerlink" title="1. Requset对象和Response对象的原理"></a>1. Requset对象和Response对象的原理</h4><ol>
<li>reques和response对象是由服务器创建的，由我们来使用</li>
<li>request对象是用来获取请求消息，response是用来设置响应消息</li>
</ol>
<h4 id="2-Request对象继承体系结构"><a href="#2-Request对象继承体系结构" class="headerlink" title="2.Request对象继承体系结构"></a>2.Request对象继承体系结构</h4><p>ServletRequest（接口）—-继承—-&gt;HttpServletRequest（接口）—-实现—&gt;RequestFacade（类（由Tomcat创建））</p>
<h4 id="3-Request功能："><a href="#3-Request功能：" class="headerlink" title="3.Request功能："></a>3.Request功能：</h4><ol>
<li><p>获取请求消息数据</p>
<ol>
<li><p>获取请求行数据</p>
<ol>
<li><p>获取请求方式：String getMethod();</p>
</li>
<li><p>获取虚拟目录：String getContextPath();</p>
</li>
<li><p>获取Servlet资源路径：String getServletPath();</p>
</li>
<li><p>获取get方式的请求参数：String getQueryString();</p>
</li>
<li><p>获取请求的URL：</p>
<ol>
<li><p>String getRequestURI(); </p>
</li>
<li><p>StringBuffer getRequestURL();</p>
<p>*URL：统一资源定位符</p>
<p>*URI： 统一资源标识符（表示范围比URL更大）</p>
</li>
</ol>
</li>
<li><p>获取协议及版本：String getProtocol();</p>
</li>
<li><p>获取客户机的IP地址：String getRemoteAddr();</p>
</li>
</ol>
</li>
<li><p>获取请求头数据</p>
<ol>
<li>通过请求头的名称获取请求头的值：String getHeader(String name);</li>
<li>获取所有的请求头名称：Enumeration<String>  getHeaderNames();</li>
</ol>
</li>
<li><p>获取请求体数据：</p>
<ol>
<li>注：只有POST请求方式才有请求体，并在请求体中封装了POST请求的请求参数</li>
<li>步骤：<ol>
<li>获取流对象：<ol>
<li>BufferedReader getReader():获取字符输入流，只能操作字符流</li>
<li>ServletInputStream getInputStream():获取字节输入流，可以操作所有类型的数据</li>
</ol>
</li>
<li>再从流对象中拿取数据</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>其他功能</p>
<ol>
<li><p>获取请求参数的通用方式（不论是POST还是GET请求方式都可以用下列的方法获取请求参数）</p>
<ol>
<li><p>String getParameter(String name):根据参数名称获取参数值</p>
</li>
<li><p>String getParameterValues(String name):根据参数名称获取参数值的数组（多用于复选框中（”checkbox”等））</p>
</li>
<li><p>Enumeration<String>  getParameterNames():获取所有请求的参数名称</p>
</li>
<li><p>Map&lt;String,String[]&gt;  getParameterMap():获取所有参数的map集合</p>
<p>*中文乱码问题：get方式在tomcat中已经将get方式乱码问题解决了，但post方式仍会乱码</p>
<p>*解决方法：在获取参数之前，设置request的编码：request.setCharacterEncoding(“utf-8”);</p>
</li>
</ol>
</li>
<li><p>请求转发：一种在<strong>服务器内部</strong>的资源跳转方式</p>
<ol>
<li>步骤：<ol>
<li>通过request对象获取请求转发器：RequestDispatcher  getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发：forword(ServletRequest request , ServletResponse response)</li>
</ol>
</li>
<li>特点：<ol>
<li>浏览器地址栏不发生变化</li>
<li>只能转发到当前服务器内部资源中</li>
<li>转发是一次<strong>请求</strong></li>
</ol>
</li>
</ol>
</li>
<li><p>共享数据：</p>
<ol>
<li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p>
</li>
<li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p>
</li>
<li><p>方法：</p>
<ol>
<li>void setAttribute(String name, Object obj)：存储数据</li>
<li>Object getAttribute(String name)：获取数据</li>
<li>void removeAttribute(String name)：通过键值对移除数据</li>
</ol>
</li>
</ol>
</li>
<li><p>获取ServletContext：</p>
<p>SevletContext  getServletContext();</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Http</tag>
        <tag>Request</tag>
      </tags>
  </entry>
  <entry>
    <title>if...if和if...else if的区别</title>
    <url>/2020/04/15/if-if%E5%92%8Cif-else-if%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h4><p>在学习Cookie入门时，需要做一个相关案例，需求如下：</p>
<ol>
<li><p>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</p>
<a id="more"></a>
</li>
<li><p>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</p>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CookieTest1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置页面显示格式</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取浏览器的cookie数据</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//对从浏览器获取的cookie进行判断</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//对获取的cookie数据进行遍历</span></span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="keyword">if</span>(name.equals(<span class="string">"lastTime"</span>))&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//获取上次访问时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    <span class="comment">//使用url编码进行解码</span></span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    response.getWriter().write(<span class="string">"欢迎回来！您上次访问时间："</span>+value);</span><br><span class="line">                    <span class="comment">//重新设置此cookie数据的值，并返回给浏览器，记录本次访问时间，以便下次访问时调用</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy:MM:dd HH:mm:ss"</span>);</span><br><span class="line">                    String now = sdf.format(date);</span><br><span class="line">                    <span class="comment">//使用url编码方式</span></span><br><span class="line">                    now = URLEncoder.encode(now,<span class="string">"utf-8"</span>);</span><br><span class="line">                    cookie.setValue(now);</span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//创建一个cookie，记录首次访问的时间，以便下次访问时调用</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy:MM:dd HH:mm:ss"</span>);</span><br><span class="line">            String now = sdf.format(date);</span><br><span class="line">            now = URLEncoder.encode(now,<span class="string">"utf-8"</span>);</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,now);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            response.getWriter().write(<span class="string">"欢迎您首次访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="发现的问题："><a href="#发现的问题：" class="headerlink" title="发现的问题："></a>发现的问题：</h4><p>在浏览器对服务器进行首次访问时，页面无法显示”欢迎您首次访问“的字样，并且在接下来进行多次访问后，也没有出现”欢迎回来，您上次访问时间：…”的字样,说明在首次访问时并没有成功将lastTime名称的cookie数据传输给浏览器。</p>
<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>在对从浏览器获取的cookie数据进行第一次条件判断时采用了if…else if的判断格式。</p>
<h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>if…else if 和 if…if 的区别在于，前者只有对if的条件判断失败后才会执行else if；而后者无论如何都会依次对if条件进行判断。</p>
<p>回到案例，在第一次访问服务器时，由于浏览器本身就具有其他cookie数据，所以在对获取的cookie数据进行第一次条件判断时（cookies != null &amp;&amp; cookies.length &gt; 0）为true，但是在接下来进行name.equals(“lastTime”) 条件判断时，由于这是首次访问，并没有将lastTime名称的cookie数据传输进浏览器，所以判断为false，跳出if。但是由于采用了 if…else if 的判断格式，在第一次if判断为true的情况无法进行else if判断，导致无法执行else if中的操作（将lastTime名称的cookie数据传入浏览器），所以在进行多次访问后页面仍然显示空白。</p>
<h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>将对获取的cookie数据进行第一次条件判断时，将判断格式改为 if…if 的格式，这样就可以在首次访问时顺利执行else if中的操作，将设定好的cookie数据传入浏览器。</p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>Response入门学习小结</title>
    <url>/2020/04/14/Response%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h4 id="1-请求消息：客户端发给服务器端的数据"><a href="#1-请求消息：客户端发给服务器端的数据" class="headerlink" title="1.请求消息：客户端发给服务器端的数据"></a>1.请求消息：客户端发给服务器端的数据</h4><p>数据格式：</p>
<ol>
<li><p>请求头</p>
<a id="more"></a>
</li>
<li><p>请求行</p>
</li>
<li><p>请求空行</p>
</li>
<li><p>请求体</p>
</li>
</ol>
<h4 id="2-响应消息"><a href="#2-响应消息" class="headerlink" title="2. 响应消息"></a>2. 响应消息</h4><p>数据格式：</p>
<ol>
<li><p>响应行：</p>
<p>数据格式：</p>
<ol>
<li>版本/协议</li>
<li>响应状态码：<ol>
<li>状态码都是三位数的</li>
<li>分类：<ol>
<li>1xx：服务器接收客户端消息，但是没有接受完成，等待一段时间后，发送此状态码</li>
<li>2xx：成功。例：200</li>
<li>3xx：重定向。例：302</li>
<li>4xx：客户端错误。例：404（请求路径没有对应资源）、405（请求方式没有对应的doXxx方法</li>
<li>5xx：服务器端错误。例：500（服务器内部出现问题）</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>响应头：</p>
<ol>
<li><p>格式：  头名称：值</p>
</li>
<li><p>常见的响应头：</p>
<ol>
<li><p>Content-Type：服务器端告诉客户端本次响应体数据格式以及编码方式</p>
</li>
<li><p>Content-disposition：服务端告诉客户端以什么格式打开响应体数据</p>
<p>取值：</p>
<ol>
<li>in-line：默认值，在当前页面打开</li>
<li>attachment;filename=xxx ：以附件形式打开响应体（一般用于文件下载）</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>响应空行</p>
</li>
<li><p>响应体：传输的数据</p>
</li>
</ol>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol>
<li><p>设置响应行</p>
<p>重定向：</p>
<ol>
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置状态码为302</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//设置响应头location（即设置跳转的资源方向）</span></span><br><span class="line">response.setHeader(<span class="string">"location"</span>,<span class="string">"/虚拟目录/资源路径"</span>);</span><br><span class="line"><span class="comment">//还有一种简单的重定向方式</span></span><br><span class="line">response.sendRedirect(<span class="string">"/虚拟目录/资源路径"</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>重定向的特点：redirect</p>
<ol>
<li>地址栏发生变化</li>
<li>重定向可以访问其他站点（服务器）的资源</li>
<li>重定向是两次请求，不能使用Request对象来共享数据</li>
</ol>
</li>
<li><p>转发的特点：forwar</p>
<ol>
<li>地址栏不发生变化</li>
<li>转发只能访问当前服务器下的资源</li>
<li>转发是一次请求，所有可以使用Request对象来共享数据</li>
</ol>
</li>
<li><p>路径的写法</p>
<ol>
<li><p>路径分类</p>
<ol>
<li><p>相对路径：通过相对路径不可以确定唯一资源</p>
<ol>
<li>例：./index.html</li>
<li>不能以 / 开头，以 . 开头（一个 . 代表当前目录下，两个 . 代表上一级目录下）</li>
</ol>
</li>
<li><p>绝对路径：通过绝对路径可以确定唯一资源</p>
<ol>
<li><p>以 / 开头</p>
</li>
<li><p>规则：要判断定义的路径是给谁使用的</p>
<ol>
<li><p>给客户端使用：需要加虚拟目录</p>
<p>*建议虚拟目录动态获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getContext();</span><br></pre></td></tr></table></figure>

<p>*例：<a> <form> 标签的重定向</p>
</li>
<li><p>给服务器端使用：不需要加虚拟目录</p>
<p>*例：转发路径</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>设置响应头：setHeader(String name , String value);</p>
</li>
<li><p>设置响应体：</p>
<ol>
<li><p>服务器端输出字符数据到客户端</p>
<ol>
<li><p>步骤：</p>
<ol>
<li>获取字符输出流</li>
<li>输出数据</li>
</ol>
</li>
<li><p>注意：</p>
<p>乱码问题：</p>
<ol>
<li><p>在Tomcat中，获取的字符输出流默认编码是ISO-8859-1</p>
</li>
<li><p>设置该流的默认编码</p>
</li>
<li><p>告诉浏览器响应体使用的编码</p>
<p>*简单形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
<li><p>服务器端输出字节数据到浏览器（一般用于图片传输）</p>
<p>步骤：</p>
<ol>
<li>获取字节输出流</li>
<li>输出数据</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>代表整个web应用，可以和程序的容器（服务器）通信</p>
<h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ol>
<li><p>通过Request对象获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getServletContext();</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过HttpServlet获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol>
<li><p>获取MIME类型：</p>
<ol>
<li><p>MIME类型：在互联网通信过程中定义的一种文件数据类型</p>
</li>
<li><p>格式： 大类型/小类型</p>
<p>*例：text/html、image/jpeg</p>
</li>
<li><p>获取：String   getMimeType(String file);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String type = ServletContext.getMimeType(<span class="string">"filename"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>域对象：共享数据</p>
<ol>
<li><p>setAttribute(String name , Object value);</p>
</li>
<li><p>getAttribute(String name);</p>
</li>
<li><p>removeAttribut(String name);</p>
<p>*ServletContext对象范围：所有用户所有请求的数据，可以不用转发（forward）就能在不同的Servlet资源中共享数据</p>
</li>
</ol>
</li>
<li><p>获取文件的真实（服务器）路径：String   getRealPath(String path)</p>
<ol>
<li><p>web目录下的资源的真实路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path = ServletContext.getRealPath(<span class="string">"/资源路径"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>WEB-INF目录下的资源的真实路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path = ServletContext.getRealPath(<span class="string">"/WEB-INF/资源路径"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>src目录下的资源的真实路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path = ServletContext.getRealPath(<span class="string">"/WEB-INF/classes/资源路径"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>Response</tag>
        <tag>ServletContext</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat和Servlet入门小结</title>
    <url>/2020/04/11/Tomcat%E5%92%8CServlet%E5%85%A5%E9%97%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Tomcat入门"><a href="#Tomcat入门" class="headerlink" title="Tomcat入门"></a>Tomcat入门</h2><h4 id="1-启动："><a href="#1-启动：" class="headerlink" title="1. 启动："></a>1. 启动：</h4><ol>
<li><p>进入bin目录，双击startup.bat，运行该文件</p>
<a id="more"></a>
</li>
<li><p>访问浏览器，输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 访问自己；</p>
</li>
</ol>
<p>​        输入：http://别人的ip:8080 访问别人（8080为Tomcat的端口号)</p>
<h4 id="2-启动时可能遇到的问题："><a href="#2-启动时可能遇到的问题：" class="headerlink" title="2. 启动时可能遇到的问题："></a>2. 启动时可能遇到的问题：</h4><ol>
<li><p>黑窗口一闪而过：</p>
<p>​    原因：没有正确配置JAVA_HOME变量；</p>
</li>
<li><p>启动报错：</p>
<ol>
<li>暴力解决：在cmd中输入netstat -ano找到占用端口号的对应进程并杀死</li>
<li>温柔解决：在Tomcat的config\server.xml下找到</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span><span class="attr">redirectPort</span>=<span class="string">"8445"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>​                将端口号”8080”修改为其他端口号（0~65535）</p>
<p>​        <em>注：一般将端口号修改为80（浏览器默认端口号）。这样，在使用浏览器访问时，就不用输入端口号了。</em></p>
<h4 id="3-关闭"><a href="#3-关闭" class="headerlink" title="3. 关闭"></a>3. 关闭</h4><ol>
<li><p>正常关闭：</p>
<ol>
<li><p>bin\shutdow.bat</p>
</li>
<li><p>ctrl+c</p>
</li>
</ol>
</li>
<li><p>强制关闭：</p>
<p>   点击启动窗口的 x </p>
</li>
</ol>
<h4 id="4-配置："><a href="#4-配置：" class="headerlink" title="4. 配置："></a>4. 配置：</h4><ol>
<li><p>部署项目的方式：</p>
<ol>
<li><p>直接将项目放到webapps目录下即可。</p>
<p><strong>*项目的访问路径（即保存项目的文件名）就是浏览器访问的虚拟目录</strong></p>
<p>*简化部署：可以将项目打包成一个war包，再将war包放置在webapps目录下。</p>
<p>*war包会自动解压缩</p>
</li>
<li><p>配置conf\server.xml文件：</p>
<p>*找到 <Host> 标签体，在里面配置 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Context docBase&#x3D;&quot;C:\项目存放的路径&quot; path&#x3D;&quot;&#x2F;虚拟目录&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>*优点：不用将项目部署在webapps下了，可以放置在任何位置</p>
<p>*缺点：需要修改server.xml文件，可能造成破坏</p>
</li>
<li><p>在config\Catalina\localhost下创建任意名称的xml文件，在文件中编写</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:\项目存放的位置"</span></span></span><br></pre></td></tr></table></figure>

<p>​                <strong>*虚拟目录就是此xml文件的名称</strong></p>
<p>​                *相比于第二种配置方法，可以避免破坏server.xml文件</p>
<ol start="2">
<li><p>静态项目和动态项目：</p>
<p>目录结构：</p>
<p>​    –项目的根目录（存放静态项目）</p>
<p>​            –WEB-INF目录（<strong>此目录下的项目不能被浏览器直接访问</strong>）</p>
<p>​                    –web.xml: web项目的核心配置文件</p>
<p>​                            –classes目录：放置字节码文件的目录</p>
<p>​                                    –lib目录： 放置依赖的jar包</p>
</li>
</ol>
<h2 id="Servlet入门"><a href="#Servlet入门" class="headerlink" title="Servlet入门"></a>Servlet入门</h2><h4 id="1-概念：运行在服务端的小程序"><a href="#1-概念：运行在服务端的小程序" class="headerlink" title="1. 概念：运行在服务端的小程序"></a>1. 概念：运行在服务端的小程序</h4><p>​        Servlet就是一个接口，定义了Java类被浏览器访问到（Tomcat识别）的规则。</p>
<h4 id="2-Java类对Servlet接口的实现："><a href="#2-Java类对Servlet接口的实现：" class="headerlink" title="2. Java类对Servlet接口的实现："></a>2. Java类对Servlet接口的实现：</h4><ol>
<li><p>创建一个JavaEE项目</p>
</li>
<li><p>定义一个Java类，实现（implement）Servlet接口</p>
</li>
<li><p>复习Servlet接口中的抽象方法（Servlet的生命周期方法）</p>
</li>
<li><p>配置Servlet</p>
<p> 在web.xml中进行配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>对应类的全类名<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义的名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问的资源路径<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-Servlet执行原理："><a href="#3-Servlet执行原理：" class="headerlink" title="3. Servlet执行原理："></a>3. Servlet执行原理：</h4><ol>
<li>当服务器接收到客户端浏览器的请求后，会解析URL路径，访问获取的Servlet的资源路径</li>
<li>查找web.xml文件，是否有对应的<url-pattern> 标签体内容。</li>
<li>如果有，则找到对应的<servlet-class> 全类名</li>
<li>Tomcat会将字节码文件加载进内存，并且创建对象</li>
<li>调用其方法</li>
</ol>
<h4 id="4-Servlet中的生命周期方法"><a href="#4-Servlet中的生命周期方法" class="headerlink" title="4. Servlet中的生命周期方法"></a>4. Servlet中的生命周期方法</h4><ol>
<li><p>init方法：</p>
<ol>
<li><p>在Servlet被创建时执行，并<strong>只执行一次</strong>。</p>
</li>
<li><p>默认情况下，第一次被访问时，Servlet被创建</p>
</li>
<li><p>可以配置创建Sevlet的时机：</p>
<p>在web.xml的<servlet> 标签中配置:</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>负数或正数<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​            *如果是负数，则Servlet在被访问时创建<br>​            *如果时正数，则Servlet在服务器（Tomcat）启动时创建                                    </p>
<ol start="2">
<li><p>service方法：</p>
<p>​    每次访问Servlet时，便会被调用一次</p>
</li>
<li><p>destory方法：</p>
<ol>
<li><p>Servlet被销毁时执行，并且<strong>只执行一次</strong></p>
</li>
<li><p>只有当服务器正常关闭时，才会执行</p>
</li>
<li><p><strong>destory方法在Servlet被销毁之前执行，相当于释放资源，而init相当于加载资源</strong></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="5-Servlet-3-0"><a href="#5-Servlet-3-0" class="headerlink" title="5. Servlet 3.0:"></a>5. Servlet 3.0:</h4><ol>
<li><p>好处：支持直接配置。可以不需要web.xml了</p>
</li>
<li><p>快速入门：</p>
<ol>
<li><p>创建一个JavaEE项目，选择Servlet的版本为3.0以上，可以不创建web.xml</p>
</li>
<li><p>定义一个Java类，实现Servlet接口</p>
</li>
<li><p>复写方法</p>
</li>
<li><p>在类上使用@WebServlet注解，进行配置：<strong>@WebServlet(“资源路径”)</strong></p>
</li>
</ol>
</li>
</ol>
<h4 id="6-Servlet体系结构"><a href="#6-Servlet体系结构" class="headerlink" title="6. Servlet体系结构"></a>6. Servlet体系结构</h4><p>​    Servlet (接口)—–&gt;GenericServlet(抽象类)——&gt;HttpServlet(抽象类)</p>
<p>​    *GenericServlet:将Servlet接口中其他的方法都做了默认空实现，只将service()方法作为抽象</p>
<p>​       所以，将来定义Servlet类时，可以继承GenericServlet，只实现service()方法即可</p>
<p>​    *HttpServlet:对Http协议的封装，简化操作</p>
<pre><code>1. 定义类继承HttpServle
  2. 复写doGet/doPost方法（Servlet的请求方式）</code></pre><h4 id="7-Servlet相关配置"><a href="#7-Servlet相关配置" class="headerlink" title="7.Servlet相关配置"></a>7.Servlet相关配置</h4><pre><code>1. Servlet访问路径：一个Sevlet可以配置多个访问路径   **@WebSevlet({&quot;/xx&quot;,&quot;/xx&quot;,&quot;/xx&quot;})**
 2. 路径定义规则:
      1. /xx
      2. /xx/xx（多层路径
      3. *.do</code></pre>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
</search>
