<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tomcat和Servlet入门小结</title>
    <url>/2020/04/11/Tomcat%E5%92%8CServlet%E5%85%A5%E9%97%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Tomcat入门"><a href="#Tomcat入门" class="headerlink" title="Tomcat入门"></a>Tomcat入门</h2><ul>
<li><h4 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h4><ul>
<li><ol>
<li><p>进入bin目录，双击startup.bat，运行该文件</p>
</li>
<li><p>访问浏览器，输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 访问自己；</p>
<pre><code>输入：http://别人的ip:8080 访问别人（8080为Tomcat的端口号)</code></pre></li>
</ol>
</li>
</ul>
</li>
<li><h4 id="启动时可能遇到的问题："><a href="#启动时可能遇到的问题：" class="headerlink" title="启动时可能遇到的问题："></a>启动时可能遇到的问题：</h4><ul>
<li><ol>
<li>黑窗口一闪而过：</li>
</ol>
<p>*原因：没有正确配置JAVA_HOME变量；</p>
<ol start="2">
<li>启动报错：</li>
</ol>
<p>*暴力解决：在cmd中输入netstat -ano找到占用端口号的对应进程并杀死</p>
<p>*在Tomcat的config\server.xml下找到</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">redirectPort</span>=<span class="string">"8445"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<pre><code>*一般将端口号修改为80（浏览器默认端口号）

            *好处：使用浏览器，在访问时就不用输入端口号了</code></pre><ul>
<li><h4 id="关闭："><a href="#关闭：" class="headerlink" title="关闭："></a>关闭：</h4><ol>
<li><p>正常关闭：</p>
<ol>
<li><p>bin\shutdow.bat</p>
</li>
<li><p>ctrl+c</p>
</li>
</ol>
</li>
<li><p>强制关闭：</p>
<p>*点击启动窗口的 x </p>
</li>
</ol>
</li>
<li><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><ul>
<li><p>部署项目的方式：</p>
<ol>
<li><p>直接将项目放到webapps目录下即可。</p>
<p>*项目的访问路径（即保存项目的文件名）就是浏览器访问的虚拟目录</p>
<p>*简化部署：可以将项目打包成一个war包，再将war包放置在webapps目录下。</p>
<pre><code>*war包会自动解压缩</code></pre></li>
<li><p>配置conf\server.xml文件：</p>
<p>找到 <Host> 标签体，在里面配置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:\项目存放的路径"</span> <span class="attr">path</span>=<span class="string">"/虚拟目录"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
</li>
</ul>
<pre><code>           *优点：不用将项目部署在webapps下了，可以放置在任何位置

           *缺点：需要修改server.xml文件，可能造成破坏

3. 在config\Catalina\localhost下创建任意名称的xml文件，在文件中编写

   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:\项目存放的位置"</span></span></span><br></pre></td></tr></table></figure>



           *虚拟路径就是此xml文件的名称

           *优点：相比于第二种配置方法，可以避免破坏server.xml文件</code></pre><ul>
<li><p>静态项目和动态项目：</p>
<ul>
<li>目录结构：<ul>
<li>–项目的根目录（存放静态项目）<ul>
<li>–WEB-INF目录（此目录下的项目不能被浏览器直接访问）<ul>
<li>–web.xml: web项目的核心配置文件</li>
<li>–classes目录：放置字节码文件的目录</li>
<li>–lib目录： 放置依赖的jar包</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Servlet入门"><a href="#Servlet入门" class="headerlink" title="Servlet入门"></a>Servlet入门</h2><ul>
<li><h4 id="概念：运行在服务端的小程序"><a href="#概念：运行在服务端的小程序" class="headerlink" title="概念：运行在服务端的小程序"></a>概念：运行在服务端的小程序</h4><pre><code>*Servlet就是一个接口，定义了Java类被浏览器访问到（Tomcat识别）的规则。</code></pre></li>
<li><h4 id="Java类对Servlet接口的实现："><a href="#Java类对Servlet接口的实现：" class="headerlink" title="Java类对Servlet接口的实现："></a>Java类对Servlet接口的实现：</h4><ol>
<li><p>创建一个JavaEE项目</p>
</li>
<li><p>定义一个Java类，实现（implement）Servlet接口</p>
</li>
<li><p>复习Servlet接口中的抽象方法（Servlet的生命周期方法）</p>
</li>
<li><p>配置Servlet</p>
<p>*在web.xml中进行配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>对应类的全类名<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义的名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问的资源路径<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h4 id="Servlet执行原理："><a href="#Servlet执行原理：" class="headerlink" title="Servlet执行原理："></a>Servlet执行原理：</h4><ol>
<li><p>当服务器接收到客户端浏览器的请求后，会解析URL路径，访问获取的Servlet的资源路径</p>
</li>
<li><p>查找web.xml文件，是否有对应的<url-pattern> 标签体内容。</p>
</li>
<li><p>如果有，则找到对应的<servlet-class> 全类名</p>
</li>
<li><p>Tomcat会将字节码文件加载进内存，并且创建对象</p>
</li>
<li><p>调用其方法</p>
</li>
</ol>
</li>
<li><h4 id="Servlet中的生命周期方法"><a href="#Servlet中的生命周期方法" class="headerlink" title="Servlet中的生命周期方法"></a>Servlet中的生命周期方法</h4><ol>
<li><p>init方法：</p>
<p>*在Servlet被创建时执行，并只执行一次。</p>
<pre><code>*Servlet什么时候被执行？

                 *默认情况下，第一次被访问时，Servlet被创建

                 *可以配置创建Sevlet的时机：

                                 在web.xml的&lt;servlet&gt; 标签中配置</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>负数或正数<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>*如果是负数，则Servlet在被访问时创建

*如果时正数，则Servlet在服务器（Tomcat）启动时创建</code></pre></li>
</ol>
</li>
</ul>
<pre><code>​                                            </code></pre><ol start="2">
<li><p>service方法：</p>
<p>*每次访问Servlet时，便会别调用一次</p>
</li>
<li><p>destory方法：</p>
<p>*Servlet被销毁时执行，并且只执行一次</p>
<p>*只有当服务器正常关闭时，才会执行</p>
<p>*destory方法在Servlet被销毁之前执行，相当于释放资源，而init相当于加载资源</p>
</li>
</ol>
<ul>
<li><h4 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0:"></a>Servlet 3.0:</h4><ol>
<li><p>好处：支持直接配置。可以不需要web.xml了</p>
</li>
<li><p>步骤：</p>
<ol>
<li><p>创建一个JavaEE项目，选择Servlet的版本为3.0以上，可以不创建web.xml</p>
</li>
<li><p>定义一个Java类，实现Servlet接口</p>
</li>
<li><p>复写方法</p>
</li>
<li><p>在类上使用@WebServlet注解，进行配置</p>
<p>*@WebServlet(“资源路径”)</p>
</li>
</ol>
</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
