<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Request入门学习小结</title>
    <url>/2020/04/13/Request%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h4><ol>
<li><p>基于TCP/IP的高级协议</p>
</li>
<li><p>默认端口号为 80 </p>
</li>
<li><p>基于请求/响应模型：一次请求对应一次响应</p>
</li>
<li><p>无状态的：每次请求之间相互独立，不能交互数据</p>
<a id="more"></a>

<p>*历史版本</p>
<p>1.0：每一次请求响应都会建立新的连接</p>
<p>1.1：可以复用链接，是对1.0版本的升级</p>
</li>
</ol>
<h4 id="2-请求消息的数据格式"><a href="#2-请求消息的数据格式" class="headerlink" title="2.请求消息的数据格式"></a>2.请求消息的数据格式</h4><ol>
<li>请求行：<ol>
<li>请求的方式：<ol>
<li>GET:<ol>
<li>请求参数在请求行中，在url之后</li>
<li>请求的url长度有限制</li>
<li>不太安全</li>
</ol>
</li>
<li>POST：<ol>
<li>请求参数在请求体中</li>
<li>请求的url长度没有限制</li>
<li>相对安全</li>
</ol>
</li>
</ol>
</li>
<li>请求的url：/资源路径</li>
<li>请求的协议/版本：Http/1.1</li>
</ol>
</li>
<li>请求头：客户端浏览器告诉服务器的一些信息<ol>
<li>格式：  请求头名称：请求头值</li>
<li>常见的请求头<ol>
<li>User-Agent：浏览器告诉服务器自身的版本信息，以解决浏览器的兼容问题</li>
<li>Referer：告诉服务器当前请求的来源，可以防止盗链和进行统计工作</li>
</ol>
</li>
</ol>
</li>
<li>请求空行：用于分割POST请求的请求头和请求体</li>
<li>请求体（正文）：封装POST请求消息的请求参数</li>
</ol>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h4 id="1-Requset对象和Response对象的原理"><a href="#1-Requset对象和Response对象的原理" class="headerlink" title="1. Requset对象和Response对象的原理"></a>1. Requset对象和Response对象的原理</h4><ol>
<li>reques和response对象是由服务器创建的，由我们来使用</li>
<li>request对象是用来获取请求消息，response是用来设置响应消息</li>
</ol>
<h4 id="2-Request对象继承体系结构"><a href="#2-Request对象继承体系结构" class="headerlink" title="2.Request对象继承体系结构"></a>2.Request对象继承体系结构</h4><p>ServletRequest（接口）—-继承—-&gt;HttpServletRequest（接口）—-实现—&gt;RequestFacade（类（由Tomcat创建））</p>
<h4 id="3-Request功能："><a href="#3-Request功能：" class="headerlink" title="3.Request功能："></a>3.Request功能：</h4><ol>
<li><p>获取请求消息数据</p>
<ol>
<li><p>获取请求行数据</p>
<ol>
<li><p>获取请求方式：String getMethod();</p>
</li>
<li><p>获取虚拟目录：String getContextPath();</p>
</li>
<li><p>获取Servlet资源路径：String getServletPath();</p>
</li>
<li><p>获取get方式的请求参数：String getQueryString();</p>
</li>
<li><p>获取请求的URL：</p>
<ol>
<li><p>String getRequestURI(); </p>
</li>
<li><p>StringBuffer getRequestURL();</p>
<p>*URL：统一资源定位符</p>
<p>*URI： 统一资源标识符（表示范围比URL更大）</p>
</li>
</ol>
</li>
<li><p>获取协议及版本：String getProtocol();</p>
</li>
<li><p>获取客户机的IP地址：String getRemoteAddr();</p>
</li>
</ol>
</li>
<li><p>获取请求头数据</p>
<ol>
<li>通过请求头的名称获取请求头的值：String getHeader(String name);</li>
<li>获取所有的请求头名称：Enumeration<String>  getHeaderNames();</li>
</ol>
</li>
<li><p>获取请求体数据：</p>
<ol>
<li>注：只有POST请求方式才有请求体，并在请求体中封装了POST请求的请求参数</li>
<li>步骤：<ol>
<li>获取流对象：<ol>
<li>BufferedReader getReader():获取字符输入流，只能操作字符流</li>
<li>ServletInputStream getInputStream():获取字节输入流，可以操作所有类型的数据</li>
</ol>
</li>
<li>再从流对象中拿取数据</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>其他功能</p>
<ol>
<li><p>获取请求参数的通用方式（不论是POST还是GET请求方式都可以用下列的方法获取请求参数）</p>
<ol>
<li><p>String getParameter(String name):根据参数名称获取参数值</p>
</li>
<li><p>String getParameterValues(String name):根据参数名称获取参数值的数组（多用于复选框中（”checkbox”等））</p>
</li>
<li><p>Enumeration<String>  getParameterNames():获取所有请求的参数名称</p>
</li>
<li><p>Map&lt;String,String[]&gt;  getParameterMap():获取所有参数的map集合</p>
<p>*中文乱码问题：get方式在tomcat中已经将get方式乱码问题解决了，但post方式仍会乱码</p>
<p>*解决方法：在获取参数之前，设置request的编码：request.setCharacterEncoding(“utf-8”);</p>
</li>
</ol>
</li>
<li><p>请求转发：一种在<strong>服务器内部</strong>的资源跳转方式</p>
<ol>
<li>步骤：<ol>
<li>通过request对象获取请求转发器：RequestDispatcher  getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发：forword(ServletRequest request , ServletResponse response)</li>
</ol>
</li>
<li>特点：<ol>
<li>浏览器地址栏不发生变化</li>
<li>只能转发到当前服务器内部资源中</li>
<li>转发是一次<strong>请求</strong></li>
</ol>
</li>
</ol>
</li>
<li><p>共享数据：</p>
<ol>
<li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p>
</li>
<li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p>
</li>
<li><p>方法：</p>
<ol>
<li>void setAttribute(String name, Object obj)：存储数据</li>
<li>Object getAttribute(String name)：获取数据</li>
<li>void removeAttribute(String name)：通过键值对移除数据</li>
</ol>
</li>
</ol>
</li>
<li><p>获取ServletContext：</p>
<p>SevletContext  getServletContext();</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Http</tag>
        <tag>Request</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat和Servlet入门小结</title>
    <url>/2020/04/11/Tomcat%E5%92%8CServlet%E5%85%A5%E9%97%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Tomcat入门"><a href="#Tomcat入门" class="headerlink" title="Tomcat入门"></a>Tomcat入门</h2><h4 id="1-启动："><a href="#1-启动：" class="headerlink" title="1. 启动："></a>1. 启动：</h4><ol>
<li><p>进入bin目录，双击startup.bat，运行该文件</p>
</li>
<li><p>访问浏览器，输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 访问自己；</p>
</li>
</ol>
<p>​        输入：http://别人的ip:8080 访问别人（8080为Tomcat的端口号)</p>
<a id="more"></a>

<h4 id="2-启动时可能遇到的问题："><a href="#2-启动时可能遇到的问题：" class="headerlink" title="2. 启动时可能遇到的问题："></a>2. 启动时可能遇到的问题：</h4><ol>
<li><p>黑窗口一闪而过：</p>
<p>​    原因：没有正确配置JAVA_HOME变量；</p>
</li>
<li><p>启动报错：</p>
<ol>
<li>暴力解决：在cmd中输入netstat -ano找到占用端口号的对应进程并杀死</li>
<li>温柔解决：在Tomcat的config\server.xml下找到</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span><span class="attr">redirectPort</span>=<span class="string">"8445"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>​                将端口号”8080”修改为其他端口号（0~65535）</p>
<p>​        <em>注：一般将端口号修改为80（浏览器默认端口号）。这样，在使用浏览器访问时，就不用输入端口号了。</em></p>
<h4 id="3-关闭"><a href="#3-关闭" class="headerlink" title="3. 关闭"></a>3. 关闭</h4><ol>
<li><p>正常关闭：</p>
<ol>
<li><p>bin\shutdow.bat</p>
</li>
<li><p>ctrl+c</p>
</li>
</ol>
</li>
<li><p>强制关闭：</p>
<p>   点击启动窗口的 x </p>
</li>
</ol>
<h4 id="4-配置："><a href="#4-配置：" class="headerlink" title="4. 配置："></a>4. 配置：</h4><ol>
<li><p>部署项目的方式：</p>
<ol>
<li><p>直接将项目放到webapps目录下即可。</p>
<p><strong>*项目的访问路径（即保存项目的文件名）就是浏览器访问的虚拟目录</strong></p>
<p>*简化部署：可以将项目打包成一个war包，再将war包放置在webapps目录下。</p>
<p>*war包会自动解压缩</p>
</li>
<li><p>配置conf\server.xml文件：</p>
<p>*找到 <Host> 标签体，在里面配置 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Context docBase&#x3D;&quot;C:\项目存放的路径&quot; path&#x3D;&quot;&#x2F;虚拟目录&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>*优点：不用将项目部署在webapps下了，可以放置在任何位置</p>
<p>*缺点：需要修改server.xml文件，可能造成破坏</p>
</li>
<li><p>在config\Catalina\localhost下创建任意名称的xml文件，在文件中编写</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:\项目存放的位置"</span></span></span><br></pre></td></tr></table></figure>

<p>​                <strong>*虚拟目录就是此xml文件的名称</strong></p>
<p>​                *相比于第二种配置方法，可以避免破坏server.xml文件</p>
<ol start="2">
<li><p>静态项目和动态项目：</p>
<p>目录结构：</p>
<p>​    –项目的根目录（存放静态项目）</p>
<p>​            –WEB-INF目录（<strong>此目录下的项目不能被浏览器直接访问</strong>）</p>
<p>​                    –web.xml: web项目的核心配置文件</p>
<p>​                            –classes目录：放置字节码文件的目录</p>
<p>​                                    –lib目录： 放置依赖的jar包</p>
</li>
</ol>
<h2 id="Servlet入门"><a href="#Servlet入门" class="headerlink" title="Servlet入门"></a>Servlet入门</h2><h4 id="1-概念：运行在服务端的小程序"><a href="#1-概念：运行在服务端的小程序" class="headerlink" title="1. 概念：运行在服务端的小程序"></a>1. 概念：运行在服务端的小程序</h4><p>​        Servlet就是一个接口，定义了Java类被浏览器访问到（Tomcat识别）的规则。</p>
<h4 id="2-Java类对Servlet接口的实现："><a href="#2-Java类对Servlet接口的实现：" class="headerlink" title="2. Java类对Servlet接口的实现："></a>2. Java类对Servlet接口的实现：</h4><ol>
<li><p>创建一个JavaEE项目</p>
</li>
<li><p>定义一个Java类，实现（implement）Servlet接口</p>
</li>
<li><p>复习Servlet接口中的抽象方法（Servlet的生命周期方法）</p>
</li>
<li><p>配置Servlet</p>
<p> 在web.xml中进行配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>对应类的全类名<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义的名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问的资源路径<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-Servlet执行原理："><a href="#3-Servlet执行原理：" class="headerlink" title="3. Servlet执行原理："></a>3. Servlet执行原理：</h4><ol>
<li>当服务器接收到客户端浏览器的请求后，会解析URL路径，访问获取的Servlet的资源路径</li>
<li>查找web.xml文件，是否有对应的<url-pattern> 标签体内容。</li>
<li>如果有，则找到对应的<servlet-class> 全类名</li>
<li>Tomcat会将字节码文件加载进内存，并且创建对象</li>
<li>调用其方法</li>
</ol>
<h4 id="4-Servlet中的生命周期方法"><a href="#4-Servlet中的生命周期方法" class="headerlink" title="4. Servlet中的生命周期方法"></a>4. Servlet中的生命周期方法</h4><ol>
<li><p>init方法：</p>
<ol>
<li><p>在Servlet被创建时执行，并<strong>只执行一次</strong>。</p>
</li>
<li><p>默认情况下，第一次被访问时，Servlet被创建</p>
</li>
<li><p>可以配置创建Sevlet的时机：</p>
<p>在web.xml的<servlet> 标签中配置:</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>负数或正数<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​            *如果是负数，则Servlet在被访问时创建<br>​            *如果时正数，则Servlet在服务器（Tomcat）启动时创建                                    </p>
<ol start="2">
<li><p>service方法：</p>
<p>​    每次访问Servlet时，便会被调用一次</p>
</li>
<li><p>destory方法：</p>
<ol>
<li><p>Servlet被销毁时执行，并且<strong>只执行一次</strong></p>
</li>
<li><p>只有当服务器正常关闭时，才会执行</p>
</li>
<li><p><strong>destory方法在Servlet被销毁之前执行，相当于释放资源，而init相当于加载资源</strong></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="5-Servlet-3-0"><a href="#5-Servlet-3-0" class="headerlink" title="5. Servlet 3.0:"></a>5. Servlet 3.0:</h4><ol>
<li><p>好处：支持直接配置。可以不需要web.xml了</p>
</li>
<li><p>快速入门：</p>
<ol>
<li><p>创建一个JavaEE项目，选择Servlet的版本为3.0以上，可以不创建web.xml</p>
</li>
<li><p>定义一个Java类，实现Servlet接口</p>
</li>
<li><p>复写方法</p>
</li>
<li><p>在类上使用@WebServlet注解，进行配置：<strong>@WebServlet(“资源路径”)</strong></p>
</li>
</ol>
</li>
</ol>
<h4 id="6-Servlet体系结构"><a href="#6-Servlet体系结构" class="headerlink" title="6. Servlet体系结构"></a>6. Servlet体系结构</h4><p>​    Servlet (接口)—–&gt;GenericServlet(抽象类)——&gt;HttpServlet(抽象类)</p>
<p>​    *GenericServlet:将Servlet接口中其他的方法都做了默认空实现，只将service()方法作为抽象</p>
<p>​       所以，将来定义Servlet类时，可以继承GenericServlet，只实现service()方法即可</p>
<p>​    *HttpServlet:对Http协议的封装，简化操作</p>
<pre><code>1. 定义类继承HttpServle
  2. 复写doGet/doPost方法（Servlet的请求方式）</code></pre><h4 id="7-Servlet相关配置"><a href="#7-Servlet相关配置" class="headerlink" title="7.Servlet相关配置"></a>7.Servlet相关配置</h4><pre><code>1. Servlet访问路径：一个Sevlet可以配置多个访问路径   **@WebSevlet({&quot;/xx&quot;,&quot;/xx&quot;,&quot;/xx&quot;})**
 2. 路径定义规则:
      1. /xx
      2. /xx/xx（多层路径
      3. *.do</code></pre>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
</search>
